Numpy基本用法
一、Numpy模块简介：
numpy是用于数据科学计算的基础模块，Python提供了array模块，但并不支持多维，也没有各种运算函数。numpy弥补了这些缺点。numpy底层使用c语言编写内部解锁了GIL（全局解释器锁），其对数组的操作速度不受Python解释器的限制，效率远高于纯Python代码。同时它还可以作为用于整合c/c++和Fortran代码的工具包。它与其他用于数值计算的第三方库有较好的兼容性，可以作为数值计算的核心基础库，是各个模块之间链接的纽带。
  Numpy提供了两种基本对象：一个是ndarray（N-dimensional Array Object）和ufunc（Universal Function Object）。ndarray是存储单一数据类型的多维数组，而ufunc则是能够对数组进行处理的函数。
  比较特殊的，ndarray有一个子类------矩阵对象（matrix）。matrix和ndarray在运算方面有些不同，数据类型也不一样。而对ndarray提供的一些函数完全可以进行矩阵相关的运算。所以可以说ndarray几乎可以完全替代matrix，因而并不建议使用matrix。
一般的，习惯性地导入库为np（import numpy as np）
二、Numpy数据类型
类型                   描述
bool   用一位存储的布尔类型（值为True或False）
int     由所在平台决定其精度的整数（一般为int32或int64）
int8   整数，范围为-128~127
int16  整数，范围为-32768~32767
int32  整数，范围为-2^31~2^32-1
int64  整数，范围为-2^63~2^63-1
uint8  无符号整数，范围为0～225
uint16无符号整数，范围为0~65535
uint32 无符号整数，范围为0～2^32-1
uint64 无符号整数，范围为0~2^64-1
float16 半精度浮点数（16位），其中用1位表示正负号，用5位表示指数，用10位表示尾数
float32 单精度浮点数（32位），其中用1位表示正负号，用8位表示指数，用23位表示尾数 
float64或float 双精度浮点数（64位），其中用1位表示正负号，用11位表示指数，用52位表示尾数
complex64  复数，分别用两个32位浮点数表示实部和虚部
complex128或complex  复数，分别用两个64位的浮点数表示实部和虚部
三、ndarray的属性说明
属性                     说明
ndim  返回int。表示数组的维度
shape 返回tuple。表示数组的尺寸，对于n行m列的数组，形状为（n，m）
size  返回int。表示数组的元素总数，等于数组形状的乘积
dtype 返回data-type。描述数组中元素的类型
itemsize 返回int。表示数组的每个元素大小（以字节为单位）。例如，一个元素类型为float64的数组的itemsize属性值为8（float64占64个bits，每个字节长度为8，所以64/8，占用8个字节）。又如，一个元素类型为complex32的数组的itemsize的属性为4，即32/8
四、ndarray的创建及对其常见属性的查看
1、Numpy提供的array函数可以创建一维和多维数组：
np.array（object，dtype=None，copy=True，order=‘K’，subok=False，ndmin=0）
参数说明：object  接收array。表示要创建的数组。无默认
dtype  接收data-type。表示数组所需数据类型。如果未给定，则选择保存对象所需的最小类型。默认为None
copy  bool，如果为True（默认值），则复制对象。否则，只有当array返回副本，obj是嵌套序列，或者需要副本来满足任何其他要求（dtype，顺序等）时，才会进行复制。（通常不用管这个，从来没管过，管了才有可能出问题）
order 参数可选{‘K’，‘A’，‘C’，‘F’} ，指定阵列的内存布局。如果object不是数组，则新创建的数组将按C顺序排列（行优先），除非指定了'F'，在这种情况下，它将采用Fortran顺序（列优先）。如果object是一个数组，则默认为‘K’（通常也不用管这个，但这个可以把内存排列改的和Fortran一样）
subok  bool，如果为True，则子类将被传递，否则返回的数组将被强制为基类数组（默认）（这个通常也不用管）
ndmin  接收int，指定生成数组应该具有的最小维数。默认为None
out（返回值：ndarray）
根据个人经验，一般就涉及object和dtype两个参数。
下面举例：
import numpy as np
arr=np.array([1,2,3,4])#创建一个一维数组
print(arr)
Out：[1 2 3 4]#输出
 
arr2=np.array([[1,2,3],[1,2,3]],dtype='float')#创建一个二维 
print(arr2)                                   #float型数组
Out：[[1. 2. 3.]
[1. 2. 3.]]

print(arr2.shape)#查看数组结构
Out：(2, 3)
#编程时常用到两个变量a，b=arr2.shape取维度。

arr2.shape=1,6#把arr2的维度由2,3改成了1,6。
print(arr2)          #看似成了一维数组，其实还是二维。
Out：[[1. 2. 3. 1. 2. 3.]]  #一维的shape值为（1，）

print(arr2.dtype)  #输出arr2的类型
Out:dtype('float64')

print(arr2.size)  #输出arr2的元素个数
Out：6

print(arr2.itemsize) #输出arr2的每个元素大小
Out：8

2、array是通过对创建的Python序列转换成数组，因而，在某些方面效率不是很高，我们同样也能类似于c和Fortran那样创建数组，当然还是有所不同，下面举几个例子

arr=np.zeros((2,3))  #定义一个（2,3）维度的0矩阵
print(arr)            #默认是float型，也可以同array一样
Out：[[0. 0. 0.]      #对它进行dtype的定义
[0. 0. 0.]]

arr=np.eye(3)    #定义一个（3,3）的对角线为1的矩阵
print(arr)         #默认也是float型，np.eye((3),dtype=’int’)
Out：[[1. 0. 0.]   #同理也可以定义其他型
       [0. 1. 0.]
       [0. 0. 1.]]

arr=np.diag([1,2,3,4])  #定义对角线矩阵如输出
print(arr)               #数据类型默认为输入数组的类型
Out：[[1 0 0 0]
       [0 2 0 0]
       [0 0 3 0]
       [0 0 0 4]]

arr=np.ones((2,3))  #定义全为1的矩阵，默认float
print(arr)
Out：[[1. 1. 1.]
[1. 1. 1.]]

3、还有一些比较特殊的创建方式，比如arange、linspace、logspace、random函数能够创建一些比较特殊的数组，下面举例

arr=np.arange(0,1,0.1)#和Python中的range用法一样
print(arr)              #生成0到1（不包括）步长为0.1
Out：[0.  0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9]


arr=np.linspace(0,1,12)#（开始值，终值，个数）和MATLAB
print(arr)#的linspace一样给定区间等间距切分成给定数量的点
         #和range、arange不同，这个设置包含终值
Out：[0.         0.09090909 0.18181818 0.27272727 0.36363636 0.45454545
      0.54545455 0.63636364 0.72727273 0.81818182 0.90909091 1.        ]

arr=np.logspace(0,2,10)#和linspace函数类似，这个例子是
                   #生成从10^0到10^2的区间分成10个元
print(arr)          #素的等比数列

Out：[  1.           1.66810054   2.7825594    4.64158883   7.74263683
      12.91549665  21.5443469   35.93813664  59.94842503 100.        ]

#numpy的随机数生成模块random和Python标准库
#random模块使用几乎相同。

arr=np.random.random(10)#生成10个0到1之间的随
print(arr)                   #机数
Out：[0.84101128 0.32680372 0.82039483 0.27270347 0.45732036 0.15396061
0.47009445 0.03546819 0.60645941 0.78436963]

arr=np.random.rand(5,4)#生成5行4列服从均匀分布的
print(arr)                #随机数
Out：
[[0.91103363 0.99548897 0.00864644 0.29238294]
[0.14292616 0.7135444  0.77428218 0.10771192]
[0.58812719 0.01104026 0.6625825  0.35338378]
[0.70321811 0.22157668 0.50255677 0.85142634]
[0.89535099 0.49712465 0.16266592 0.77594201]]

arr=np.random.randn(6,3)#生成6行3列服从正态分布
print(arr)                  #的随机数
Out：
[[-0.83484395  0.0476378  -1.43910143]
[ 1.27061034 -1.85352862 -0.15128022]
[ 0.42378643  2.36619867 -1.42142023]
[ 0.72600341  0.75816783  0.42268386]
[-1.26730859  0.16683824 -2.17609471]
[-0.00973568  0.25055954  0.17658838]]

#randint可以生成给定上下限范围的随机数
#np.random.randint(low,high=None,size=None,dtype=’1’)
#low为最小值，high为最大值，size为shape，和标准库的一样，#这个只能是int型

#np.random模块常用函数还有
seed 确定随机生成器的种子
permutation 返回一个序列的随机排列或返回一个随机排列的范围
Shuffle 对一个序列进行随机排序
binomial 产生一个二项分布随机数
normal 产生正态高斯分布的随机数
beta 产生beta分布的随机数
chisquare 产生卡方分布的随机数
gamma 产生gamma分布的随机数
uniform 产生在[0,1]中均匀分布的随机数

五、通过索引访问数组
numpy索引数组的方式几乎和MATLAB一样，能对数组进行切片处理。其索引方式和Python的list可以说是完全一样的。直接举例

#先看一维
import numpy as np
arr=np.array([1,2,3,4,5,6])
print(arr[1])#同c语言一样索引从0开始，提取出下标为1的元素
Out：2

print(arr[2:4]) #切片有典型Python语言的特点下标从2开始到4
Out：[3 4]   #的所有元素，但不包括arr[4]

print(arr[:5]) #符号: 和MATLAB的以及Fortran等语言一样
Out：[1 2 3 4 5]#表示输出arr[5]以前的所有元素
#arr[:]则表示提取全部元素，arr[1:]则表示提取arr[1]到以后所有元素。以此类推。

#索引下标可以使用负数，和list一样，-1表示最后往前数的第一个元素，-2表示第二个以此类推。
print(arr[-1])#输出最后一个元素
Out：6

#额外举个例子
for i in arr[::-1]: #让arr元素依次倒序输出，-1在索引中
    print(i)     #结合切片非常好用，当然这里-1指步长
Out：    
6
5
4
3
2
1

arr[2:4]=100,120 #也可通过切片来改变数组的一些元素值
print(arr)
Out：[  1   2 100 120   5   6]

print(arr[1:-1:2])#和list一样arr[起始：终值：步长]（不含终值）
Out：[  2 120]#-1就代表最后一个元素，通常步长默认为1

#当步长为负数的时候开始下标必须大于结束下标

#对于二维数组或是更高维数组，索引原理和一维一样，举例

arr2=np.array([[1,2,3,4],[1,2,3,4],[5,6,7,8]])
print(arr2)
Out：[[1 2 3 4]
       [1 2 3 4]
       [5 6 7 8]]
#索引方式有两种写法：比如索引（1,1）的值，arr2[1,1]或arr2[1][1]都行。但最好用前者，后者有一定弊端。二维和一维的切片一样，没有区别。

print(arr2[1,:])
Out：[1 2 3 4]# 这样可以代表行标为1的一整行（这里arr2[1]和arr[1,]的写法也行）

print(arr2[:][2])
Out：[5 6 7 8]
                  #对比这两个例子c语言的那种写法在这里无法提取一列，而[:,2]可以，所以说推荐后者
print(arr2[:,2])
Out：[3 3 7]
#对于对维数组，还可以用整数函数访问索引，如：

print(arr2[(1,2),(1,2)])
Out：[2 7]#提取除了arr2[1,1]和arr2[2,2]的元素

print(arr2[1:,(1,2)])
Out：[[2 3] #提取出了2,3行的第1,2列
       [6 7]]
＃利用这种索引还可以，还可以更迅速的进行行列交换
＃x[(0,1),:]=x[(1,0),:]第０行和第１行交换

六、变换数组形态
#reshape函数改变数组形状

import numpy as np
arr=np.array([[1,2,3],[3,2,4],[5,6,7],[8,9,0]])
print(arr)
Out：
[[1 2 3]
 [3 2 4]
 [5 6 7]
 [8 9 0]]

print(arr.reshape(3,4))
Out：
[[1 2 3 3]
 [2 4 5 6]
 [7 8 9 0]]  #reshape和shape都能对数组形状进行改变

print(arr.ravel())  #arr.ravel()函数能将数组平铺
Out：[1 2 3 3 2 4 5 6 7 8 9 0]

#flatten函数也可以完成数组平铺，和ravel区别是它可以选择纵向或是横向
print(arr.flatten())#横向平铺
Out：[1 2 3 3 2 4 5 6 7 8 9 0]
print(arr.flatten('F'))#纵向平铺
Out：[1 3 5 8 2 2 6 9 3 4 7 0]

#hstack函数实现数组横向组合
arr2=2*arr
print(arr2)
Out：
[[ 2  4  6]
 [ 6  4  8]
 [10 12 14]
 [16 18  0]]
print(np.hstack((arr,arr2)))    
Out：
[[ 1  2  3  2  4  6]
 [ 3  2  4  6  4  8]
 [ 5  6  7 10 12 14]
 [ 8  9  0 16 18  0]]#实现了横向组合

#vstack函数实现数组纵向组合
print(np.vstack((arr,arr2)))
Out：
[[ 1  2  3]
 [ 3  2  4]
 [ 5  6  7]
 [ 8  9  0]
 [ 2  4  6]
 [ 6  4  8]
 [10 12 14]
 [16 18  0]]#实现了纵向组合

#使用concatenate函数对数组进行组合，既可以纵向，也可以横向

print(np.concatenate((arr,arr2),axis=1))
Out：
[[ 1  2  3  2  4  6]
 [ 3  2  4  6  4  8]
 [ 5  6  7 10 12 14]
 [ 8  9  0 16 18  0]]#实现了横向组合

print(np.concatenate((arr,arr2),axis=0))
Out：
[[ 1  2  3]
 [ 3  2  4]
 [ 5  6  7]
 [ 8  9  0]
 [ 2  4  6]
 [ 6  4  8]
 [10 12 14]
 [16 18  0]]#实现了纵向组合
#横向、纵向操作由axis参数决定，在Python当中，axis=0就是按纵向操作，axis=1就是按横向操作

#使用hsplit函数实现数组横向分割

arr3=np.array([[1,2,3,4],[2,3,4,5],[6,7,8,9],[3,4,5,6]])
print(arr3)    #创建一个arr3数组
Out：
[[1 2 3 4]
 [2 3 4 5]
 [6 7 8 9]
 [3 4 5 6]]

print(np.hsplit(arr3,2))#把数组横向分割成两个部分，即平分
Out：
[array([[1, 2],
       [2, 3],
       [6, 7],
       [3, 4]]), array([[3, 4],
       [4, 5],
       [8, 9],
       [5, 6]])]


a,b=np.hsplit(arr3,2)#也可以将分割好的数组分别赋值给两变量
print(a)
Out：
[[1 2]
 [2 3]
 [6 7]
 [3 4]]
print(b)
Out：
[[3 4]
 [4 5]
 [8 9]
 [5 6]]

#同理np.vsplit(arr3,2)为纵向分割成两个数组
#split函数拥有axis参数可以选择纵向或是横向切割
print(np.split(arr3,2,axis=0))#纵向分割
Out：
[array([[1, 2, 3, 4],
       [2, 3, 4, 5]]), array([[6, 7, 8, 9],
       [3, 4, 5, 6]])]
#横向分割同理



七、常见的ufunc函数运算

Ufunc函数为通用函数，是一种能够对数组的所有元素进行操作的函数。ufunc是针对数组进行操作的，充分利用好它，我们可以少写循环语句，提高运算效率。对与数组运算来说使用ufunc函数比使用math库中的函数高效得多。
1、数组四则运算
import numpy as np
x=np.array([1,2,3])
y=np.array([4,5,6])
print(x+y)#两个数组相加即是对应元素相加
Out：[5 7 9]

print(x+1)#一个数组加上一个常数，即是每个元素加上它
Out：[2 3 4]

print(x-y)#减法原理和加法相同
Out：[-3 -3 -3]

print(x*y)#数组相乘即是对应元素相乘，同理如果乘常数
Out：[ 4 10 18]#全部对应元素相乘

print(x/y)#数组相除
Out：[0.25 0.4  0.5 ]

print(x**y)#数组的幂运算，也是对应元素幂运算
Out：[  1  32 729]


2、数组的比较运算
ufunc中可以用完整的比较运算：>、<、==、>=、<=、!=。通过比较返回结果是一个布尔数组，其每个元素为数组对应元素比较结果

print(x<y)
Out：[ True  True  True]

print(x==y)
Out：[False False False]
#以此类推
#在逻辑运算中，np.all表示逻辑and，np.any表示逻辑or
#例如：



x=np.array([1,2,3])
y=np.array([1,5,6])
print(np.all(x==y))
Out：False

print(np.any(x==y))
Out：True

3、ufunc函数的广播机制
广播（broadcasting）是指不同形状的数组之间执行算术运算的方式。数组间进行整体运算时是对应元素进行运算，前提是要求有同样的shape，当shape不同时，numpy会实行广播机制。为了更好地使用广播机制，要遵循4个原则：
1 让所有的输入数组向其中shape最长的数组看齐，shape中不足的部分通过在前面加1补齐。
2 输出数组shape是输入数组shape的各个轴上的最大值。
3 如果输入数组的某个轴和输出数组的对应轴的长度相同或者其长度为1，则这个数组能够用来计算，否则出错。
4 当输入数组的某个轴长度为1时，沿着此轴运算时使用此轴上的第一组值。

#一维数组的广播机制
arr1=np.array([[0,0,0],[1,1,1],[2,2,2],[3,3,3]])
print(arr1)    #创建arr1
Out：
[[0 0 0]
 [1 1 1]
 [2 2 2]
 [3 3 3]]
arr2=np.array([1,2,3])   #创建arr2
print(arr2)
Out：[1 2 3]

print(arr1+arr2)     #相当于arr2数组在广播机制下扩展成了
Out：               #和arr1数组shape一样的数组，扩展部
[[1 2 3]             #分是对最原始数组的复制，扩展方向向下，
 [2 3 4]             #比如这里的arr1扩展成了[[1,2,3]
 [3 4 5]                                    [1,2,3]
 [4 5 6]]                                   [1,2,3]
                                            [1,2,3]]

#二维数组的广播机制

arr3=np.array([1,2,3,4]).reshape(4,1)#创建arr3
print(arr3)
Out：
[[1]
 [2]
 [3]
 [4]]
print(arr1+arr3)
Out：
[[1 1 1]
 [3 3 3]
 [5 5 5]
 [7 7 7]]
#类似于一维数组的广播机制，相当于是对arr3数组的复制扩展达#到arr1的shape，扩展方向向右。这里arr3扩展成了[[1,1,1]
                                                                                                [2,2,2]
                                                                                                [3,3,3]
                                                                                                [4,4,4]]

4、常用的数学函数
#np.abs( ) 计算整型、浮点、复数绝对值
#np.sqrt( ) 开平方根,等价于array**0.5
#np.exp( )自然常数e为底的幂方
#np.log( )自然对数e
#np.log10( )基于10的对数
#np.log2( )基于2的对数
#np.log1p( ) log(x+1)即ln（x+1），该函数常用来预处理数据，使其更加服从高斯分布。逆运算为np.expm1( )，即exp(x)-1。用作数据还原。
＃ｎp.sign( ),计算元素的符号，０为０，正数为１，负数为－１
＃np.ceil( ),计算大于或等于元素的最小整数
＃np.floor( ),计算小于或等于元素的最大整数
＃np.rint( ),对浮点数取整到最近的整数，但不改变浮点数的类型
＃np.modf( ),分别返回浮点数浮点数和小数部分的元组
如：
x=np.modf(1.2)
print(x)
Out:(0.19999999999999996, 1.0)
print(type(x))
Out:<class 'tuple'>
＃np.isnan( ),返回布尔数组，哪些元素是NAN
如：
x=np.array([1,np.nan,2])
np.isnan(x)
Out:array([False,  True, False])
#np.isinf( )返回布尔数组哪些元素是无限的
＃cos, cosh, sin sinh, tan, tanh，三角函数，都是弧度制
＃arccos, arccosh, arcsin, arcsinh, arctan, arctanh，反三角函数
#np.degrees( ),将弧度转化成角度
＃np.radians( ),将角度转化成弧度
#np.mod(a,b),计算两元素的余数
＃np.around(a,decimals),a数组、decimals四舍五入保留位数，默认为０，如果为负，则四舍五入到小数点左侧位置

５、数组的矩阵行列式计算（linalg）
#矩阵相乘
x=np.array([[1,2,3],[1,2,3],[4,5,6]])
y=np.array([[2,3,4],[4,5,6],[5,6,7]])
print(x.dot(y))　#也可以写成np.dot(x,y)
Out:
[[25 31 37]
 [25 31 37]
 [58 73 88]]
#对应元素相乘

print(x*y)
Out:
[[ 2  6 12]
 [ 4 10 18]
 [20 30 42]]
#比较特别的

z=np.array([1,2,3])
print(x.dot(z))
Out:[14 14 32]　＃二维数组和一维数组进行矩阵相乘，不用转置
　　　　　　　　＃如是采用对应元素相乘，则会触发广播机制

＃数组转置
print(x.T)
Out:
[[1 1 4]
 [2 2 5]
 [3 3 6]]
#如是一维矩阵则无法转置

＃np.linalg.inv( )　求逆矩阵
＃np.linalg.det( ) 矩阵求行列式（标量）
#np.linalg.norm(x,ord=2) 求二范数
#np.linalg.norm(x,ord=1) 求一范数
#np.linalg.norm(x,ord=np.inf) 求无穷范数，有axis参数可以算每行的，或每列的
#np.linalg.pinv( )求广义逆矩阵
＃解型如Ａ*X=b的线性方程组　np.linalg.solve(A,b)
a=np.array([[1,2,3],[3,4,5],[5,6,7]])
b=np.array([1,2,3])
np.linalg.solve(a,b)
Out:array([ 0. ,  0.5, -0. ])
#np.linalg.eigvals( )求矩阵特征值
＃np.linalg.eig( )求特征向量
＃np.linalg.svd( ) svd分解，U,sigma,VT = np.linalg.svd(data)
依次生成三个奇异值矩阵

八、深度拷贝和浅拷贝
区别于基本数据类型，object型数据（list,ndarray等）被拷贝时，涉及到两种情况，深拷贝和浅拷贝。
在浅拷贝时，拷贝出来的新对象的地址和原对象是不一样的，但是新对象里面的可变元素（如列表）的地址和原对象里的可变元素的地址是相同的，也就是说浅拷贝它拷贝的是浅层次的数据结构（不可变元素），对象里的可变元素作为深层次的数据结构并没有被拷贝到新地址里面去，而是和原对象里的可变元素指向同一个地址，所以在新对象或原对象里对这个可变元素做修改时，两个对象是同时改变的，但是深拷贝不会这样，这个是浅拷贝相对于深拷贝最根本的区别。
一般情况下大多数拷贝都是浅拷贝，特别是‘＝’拷贝的，如：
y=x
print(x)
Out:
[[1 2 3]    #利用‘＝’将x拷贝给y，改变y[0,0]，结果x
 [3 4 5]   #元素也变了
 [5 6 7]]
y[0,0]=0
print(x)
Out:
[[0 2 3]
 [3 4 5]
 [5 6 7]]
一般来说利用‘.copy()’拷贝的就是深度拷贝，如：

y=x.copy()
print(x)
Out:
[[0 2 3]
 [3 4 5]
 [5 6 7]]
y[0,0]=1
print(x)
Out:
[[0 2 3]
 [3 4 5]
 [5 6 7]]
print(y)
Out:
[[1 2 3]
 [3 4 5]
 [5 6 7]]
#由此可见，x,y互不影响
＃像x=y.reshape(a,b)之类这种拷贝都是浅拷贝

九、简单统计分析
＃arr.sort( )或np.sort(arr)对数组进行从小到大排序，#arr.sort(axis=0)按纵轴顺序排，arr.sort(axis=1)按横轴顺序排
＃arr.argsort( )排序后返回值是元素下标，如：
x=np.array([1,2,3])
x.argsort()
Out：array([0, 1, 2]
＃np.sum(arr)计算数组的和
＃np.sum(arr,axis=0)沿纵轴求和,1就按横轴
＃np.mean(arr)计算平均值，同理可对横纵分别求
＃np.std(arr)计算数组标准差
＃np.var(arr)计算数组方差
#np.min(arr)计算数组最小值
＃np.argmin(arr)返回数组元素最小索引值
＃np.argmax(arr)返回数组最大元素索引值
＃np.cumsum(arr)计算所有元素累计和
x=np.array([1,2,3,4,5])
print(np.cumsum(x))
Out:[ 1  3  6 10 15]
#np.cumprod(arr)计算所有元素累计积
print(np.cumprod(x))
Out:[  1   2   6  24 120]
#np.diff(arr)计算差分
print(np.diff(x))
Out:[1 1 1 1]
十、简单文件读写
Numpy读写的文件主要有二进制的文件读取和文件列表形式的数据读写。numpy提供了若干函数，可以把结果保存到二进制文件和文本文件中，numpy还提供了许多从文件读取数据并将其转化为数组的方法。
save函数以二进制的格式保存数据，load函数从二进制文件中读取数据。
np.save(file,arr,allow_pickle=True,fix_imports=True)
file就是保存的文件名称（加路径），arr为要保存的数组。就是把数组保存在文件中，扩展名.npy（系统自动添加），同一个文件可以保存多个数组如：np.save(‘....../..../kk’,arr1,arr2)
data=np.load(‘..../.../ll.npy’)#读含有单个数组的文件
data=np.load(‘..../.../kk.npy’)#读含有多个数组文件
有data[‘arr_0’]为按顺序存入第一个数组，data[‘arr_1’]为第二个以此类推。
更多的是使用txt和csv文件
np.savetxt(file,x,fmt=’%18e’,delimiter=’ ’,newline=’\n’,header=’’,footer=’’,comments=’# ’)
第一个参数为文件名，第二个x为数组数据，第四个参数delimiter为数据分割符
＃np.savetxt(‘.../.../ff.txt’,arr,fmt=’%d’,delimiter=’,’)
fmt=’%d’为保存为整数，delimiter=’,’是数据间用逗号分开。
#data=np.loadtxt(‘.../../ff.txt’,delimiter=’,’)
读取的时候也要指定数据是由逗号分开的

＃data=np.genfromtxt(‘.../.../arr.txt’,delimiter=’,’)
genformtxt用于读结构化数组和缺失数据，它多了一个是否含有列标题参数‘name’,默认第一行为数据列名，所以数据从第二行开始读。（一般来说这类文件用pandas处理比较好）

对于气象方面numpy可以结合netCDF4模块来读nc文件，利用netCDF4模块读取文件，然后将数据传输到数组中便于处理。

Import numpy as np
from netCDF4 import Dataset
a=Dataset(‘..../.../mm.nc’)
Print(a.variables)#查看文件信息
Print(a.variables.key())#输出所有变量名(names)
X=np.asarray(a[‘name’])#把数据交给numpy数组



